name: Build container images
on: [push, workflow_dispatch]

concurrency:
  group: 'build-${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # - name: cache podman storage
    #   uses: actions/cache@v4
    #   with:
    #     path: ~/.local/share/containers/storage
    #     key: podman-storage-${{ matrix.platform }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: set lower case owner name
      run: |
        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
      env:
        OWNER: '${{ github.repository_owner }}'

    - name: export architecture name (removing os prefix)
      run: |
        echo "PODMAN_ARCH=${PLATFORM#*/}" >>${GITHUB_ENV}
      env:
        PLATFORM: ${{ matrix.platform }}

    - name: Container meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/${{ env.OWNER_LC }}/redir
        tags: |
          type=raw,value=build
        flavor: |
          suffix=-${{ env.PODMAN_ARCH }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Image
      id: build-image
      uses: docker/build-push-action@v6
      with:
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: ./Containerfile
        platforms: ${{ matrix.platform }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    # - name: Build Image
    #   id: build-image
    #   uses: redhat-actions/buildah-build@v2
    #   with:
    #     image: redir
    #     tags: ${{ steps.meta.outputs.tags }}
    #     labels: ${{ steps.meta.outputs.labels }}
    #     oci: true
    #     containerfiles: |
    #       ./Containerfile
    #     platforms: ${{ matrix.platform }}

    # - name: list images
    #   run: |
    #     podman images
    #     docker images

    - name: upgrade runc
      run: |
        wget https://github.com/opencontainers/runc/releases/latest/download/runc.${{ env.PODMAN_ARCH }}
        mkdir -p "$HOME/.local/bin"
        install -m 0755 runc.${{ env.PODMAN_ARCH }} "$HOME/.local/bin/runc"
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: upgrade skopeo
      run: |
        wget https://github.com/lework/skopeo-binary/releases/latest/download/skopeo-linux-${{ env.PODMAN_ARCH }}
        mkdir -p "$HOME/.local/bin"
        install -m 0755 skopeo-linux-${{ env.PODMAN_ARCH }} "$HOME/.local/bin/skopeo"
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: verify installs
      run: |
        which skopeo
        which runc

    # - run: skopeo copy containers-storage:ghcr.io/${{ env.OWNER_LC }}/redir:build-${{ env.PODMAN_ARCH }} oci-archive:/tmp/${{ env.PODMAN_ARCH }}-oci.tar
    - run: skopeo copy docker-daemon:ghcr.io/${{ env.OWNER_LC }}/redir:build-${{ env.PODMAN_ARCH }} oci-archive:/tmp/${{ env.PODMAN_ARCH }}-oci.tar

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: redir-build-${{ env.PODMAN_ARCH }}
        path: /tmp/${{ env.PODMAN_ARCH }}-oci.tar
        if-no-files-found: error
        retention-days: 1

  push:
    name: Push images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: build
    steps:

    - name: Download podman
      uses: actions/download-artifact@v4
      with:
        name: redir-build-amd64
        path: /tmp
    - name: Download podman
      uses: actions/download-artifact@v4
      with:
        name: redir-build-arm64
        path: /tmp

    - name: set lower case owner name
      run: |
        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
      env:
        OWNER: '${{ github.repository_owner }}'

    - run: podman manifest create ghcr.io/${{ env.OWNER_LC }}/redir:manifest
    - run: podman manifest add ghcr.io/${{ env.OWNER_LC }}/redir:manifest oci-archive:/tmp/arm64-oci.tar
    - run: podman manifest add ghcr.io/${{ env.OWNER_LC }}/redir:manifest oci-archive:/tmp/amd64-oci.tar
    # - run: podman manifest inspect ghcr.io/${{ env.OWNER_LC }}/redir:manifest

    - name: Container meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/${{ env.OWNER_LC }}/redir
        tags: |
          type=semver,pattern={{version}},value=${{ inputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
          type=semver,pattern={{major}},value=${{ inputs.version }}
          type=ref,event=branch
          type=ref,event=pr
          # type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
        flavor: |
          latest=${{ github.ref_name == github.event.repository.default_branch }}

    - name: add tags
      run: |
        # fix multi-line issue from steps.meta.outputs.tags
        podman tag ghcr.io/${{ env.OWNER_LC }}/redir:manifest $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' ')

    - name: Push image to GHCR
      uses: redhat-actions/push-to-registry@v2
      id: push
      with:
        image: redir
        tags: ${{ steps.meta.outputs.tags }}
        username: ${{ github.actor }}
        password: ${{ github.token }}
        registry: ghcr.io/${{ env.OWNER_LC }}

    - name: Print image url
      run: echo "Image pushed to ${{ steps.push.outputs.registry-paths }}"
